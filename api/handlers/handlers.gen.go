// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package handlers

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateIngredient defines model for CreateIngredient.
type CreateIngredient struct {
	Name *string `json:"name,omitempty"`
}

// CreateRecipe defines model for CreateRecipe.
type CreateRecipe struct {
	Ingredients *[]RecipeIngredient `json:"ingredients,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Steps       *[]RecipeStep       `json:"steps,omitempty"`
}

// Ingredient defines model for Ingredient.
type Ingredient struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Ingredients *[]RecipeIngredient `json:"ingredients,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Steps       *[]RecipeStep       `json:"steps,omitempty"`
}

// RecipeIngredient defines model for RecipeIngredient.
type RecipeIngredient struct {
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Quantity *float32            `json:"quantity,omitempty"`
	Unit     *string             `json:"unit,omitempty"`
}

// RecipeStep defines model for RecipeStep.
type RecipeStep struct {
	Description *string `json:"description,omitempty"`
}

// UserCredentials defines model for UserCredentials.
type UserCredentials struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
}

// CreateIngredientJSONRequestBody defines body for CreateIngredient for application/json ContentType.
type CreateIngredientJSONRequestBody = CreateIngredient

// CreateRecipesJSONRequestBody defines body for CreateRecipes for application/json ContentType.
type CreateRecipesJSONRequestBody = CreateRecipe

// UserLogInJSONRequestBody defines body for UserLogIn for application/json ContentType.
type UserLogInJSONRequestBody = UserCredentials

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /ingredients)
	CreateIngredient(ctx echo.Context) error

	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error

	// (GET /recipes/{id})
	GetRecipe(ctx echo.Context, id string) error

	// (POST /user/login)
	UserLogIn(ctx echo.Context) error

	// (GET /user/logout)
	UserLogOut(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredient(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIngredient(ctx)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipe(ctx, id)
	return err
}

// UserLogIn converts echo context to params.
func (w *ServerInterfaceWrapper) UserLogIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserLogIn(ctx)
	return err
}

// UserLogOut converts echo context to params.
func (w *ServerInterfaceWrapper) UserLogOut(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserLogOut(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/ingredients", wrapper.CreateIngredient)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/:id", wrapper.GetRecipe)
	router.POST(baseURL+"/user/login", wrapper.UserLogIn)
	router.GET(baseURL+"/user/logout", wrapper.UserLogOut)

}
